name: Deploy Modern Homepage

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Generate modern homepage
      run: |
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redis Stream Queue - 高性能轻量级消息队列</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                :root {
                    --primary-color: #E91E63;
                    --primary-dark: #C2185B;
                    --secondary-color: #673AB7;
                    --text-primary: #212121;
                    --text-secondary: #757575;
                    --bg-light: #FAFAFA;
                    --bg-white: #FFFFFF;
                    --border-color: #E0E0E0;
                    --shadow-sm: 0 2px 4px rgba(0,0,0,0.1);
                    --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
                    --shadow-lg: 0 10px 15px rgba(0,0,0,0.1);
                    --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
                }
                
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
                    line-height: 1.6;
                    color: var(--text-primary);
                    background: var(--bg-light);
                    overflow-x: hidden;
                }
                
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 0 20px;
                }
                
                /* Navigation */
                nav {
                    background: var(--bg-white);
                    box-shadow: var(--shadow-sm);
                    position: sticky;
                    top: 0;
                    z-index: 1000;
                }
                
                .nav-container {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 1rem 0;
                }
                
                .logo {
                    display: flex;
                    align-items: center;
                    font-size: 1.5rem;
                    font-weight: 700;
                    color: var(--primary-color);
                    text-decoration: none;
                }
                
                .logo::before {
                    content: "⚡";
                    margin-right: 0.5rem;
                    font-size: 1.8rem;
                }
                
                .nav-links {
                    display: flex;
                    gap: 2rem;
                    align-items: center;
                }
                
                .nav-links a {
                    color: var(--text-secondary);
                    text-decoration: none;
                    font-weight: 500;
                    transition: var(--transition);
                }
                
                .nav-links a:hover {
                    color: var(--primary-color);
                }
                
                .github-btn {
                    background: var(--primary-color);
                    color: white;
                    padding: 0.5rem 1.5rem;
                    border-radius: 6px;
                    text-decoration: none;
                    font-weight: 500;
                    transition: var(--transition);
                }
                
                .github-btn:hover {
                    background: var(--primary-dark);
                    transform: translateY(-1px);
                }
                
                /* Hero Section */
                .hero {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 8rem 0;
                    position: relative;
                    overflow: hidden;
                }
                
                .hero::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
                }
                
                .hero-content {
                    position: relative;
                    z-index: 1;
                    text-align: center;
                }
                
                .hero h1 {
                    font-size: 3.5rem;
                    font-weight: 800;
                    margin-bottom: 1.5rem;
                    line-height: 1.2;
                }
                
                .hero .subtitle {
                    font-size: 1.5rem;
                    margin-bottom: 3rem;
                    opacity: 0.95;
                }
                
                .hero-buttons {
                    display: flex;
                    gap: 1rem;
                    justify-content: center;
                    flex-wrap: wrap;
                }
                
                .btn {
                    padding: 1rem 2rem;
                    border-radius: 8px;
                    text-decoration: none;
                    font-weight: 600;
                    font-size: 1.1rem;
                    transition: var(--transition);
                    display: inline-flex;
                    align-items: center;
                    gap: 0.5rem;
                }
                
                .btn-primary {
                    background: white;
                    color: var(--primary-color);
                    box-shadow: var(--shadow-md);
                }
                
                .btn-primary:hover {
                    transform: translateY(-2px);
                    box-shadow: var(--shadow-lg);
                }
                
                .btn-secondary {
                    background: rgba(255,255,255,0.2);
                    color: white;
                    border: 2px solid rgba(255,255,255,0.3);
                    backdrop-filter: blur(10px);
                }
                
                .btn-secondary:hover {
                    background: rgba(255,255,255,0.3);
                    border-color: rgba(255,255,255,0.5);
                }
                
                /* Features Section */
                .features {
                    padding: 6rem 0;
                    background: var(--bg-white);
                }
                
                .section-header {
                    text-align: center;
                    margin-bottom: 4rem;
                }
                
                .section-header h2 {
                    font-size: 2.5rem;
                    font-weight: 700;
                    color: var(--text-primary);
                    margin-bottom: 1rem;
                }
                
                .section-header p {
                    font-size: 1.2rem;
                    color: var(--text-secondary);
                    max-width: 600px;
                    margin: 0 auto;
                }
                
                .features-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 3rem;
                }
                
                .feature-card {
                    text-align: center;
                    padding: 2rem;
                    border-radius: 12px;
                    transition: var(--transition);
                }
                
                .feature-card:hover {
                    transform: translateY(-5px);
                }
                
                .feature-icon {
                    width: 80px;
                    height: 80px;
                    margin: 0 auto 1.5rem;
                    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 2rem;
                }
                
                .feature-card h3 {
                    font-size: 1.3rem;
                    font-weight: 600;
                    margin-bottom: 1rem;
                    color: var(--text-primary);
                }
                
                .feature-card p {
                    color: var(--text-secondary);
                    line-height: 1.6;
                }
                
                /* Stats Section */
                .stats {
                    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
                    color: white;
                    padding: 4rem 0;
                }
                
                .stats-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 2rem;
                    text-align: center;
                }
                
                .stat-item h3 {
                    font-size: 2.5rem;
                    font-weight: 700;
                    margin-bottom: 0.5rem;
                }
                
                .stat-item p {
                    opacity: 0.9;
                }
                
                /* Code Section */
                .code-section {
                    padding: 6rem 0;
                    background: var(--bg-light);
                }
                
                .code-tabs {
                    display: flex;
                    justify-content: center;
                    gap: 1rem;
                    margin-bottom: 2rem;
                }
                
                .code-tab {
                    padding: 0.5rem 1.5rem;
                    background: var(--bg-white);
                    border: 2px solid var(--border-color);
                    border-radius: 8px;
                    cursor: pointer;
                    transition: var(--transition);
                    font-weight: 500;
                }
                
                .code-tab.active {
                    background: var(--primary-color);
                    color: white;
                    border-color: var(--primary-color);
                }
                
                .code-example {
                    background: var(--bg-white);
                    border-radius: 12px;
                    overflow: hidden;
                    box-shadow: var(--shadow-md);
                }
                
                .code-header {
                    background: #f5f5f5;
                    padding: 1rem;
                    border-bottom: 1px solid var(--border-color);
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                
                .code-title {
                    font-weight: 600;
                    color: var(--text-primary);
                }
                
                .copy-btn {
                    background: var(--primary-color);
                    color: white;
                    border: none;
                    padding: 0.25rem 0.75rem;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 0.9rem;
                    transition: var(--transition);
                }
                
                .copy-btn:hover {
                    background: var(--primary-dark);
                }
                
                .code-content {
                    padding: 2rem;
                    background: #2d2d2d;
                    color: #f8f8f2;
                    font-family: 'Monaco', 'Menlo', monospace;
                    font-size: 0.9rem;
                    line-height: 1.5;
                    overflow-x: auto;
                }
                
                /* Footer */
                .footer {
                    background: var(--text-primary);
                    color: white;
                    text-align: center;
                    padding: 3rem 0;
                }
                
                .footer-links {
                    display: flex;
                    justify-content: center;
                    gap: 2rem;
                    margin-bottom: 2rem;
                }
                
                .footer-links a {
                    color: rgba(255,255,255,0.8);
                    text-decoration: none;
                    transition: var(--transition);
                }
                
                .footer-links a:hover {
                    color: white;
                }
                
                /* Responsive */
                @media (max-width: 768px) {
                    .nav-links {
                        display: none;
                    }
                    
                    .hero h1 {
                        font-size: 2.5rem;
                    }
                    
                    .hero .subtitle {
                        font-size: 1.2rem;
                    }
                    
                    .hero-buttons {
                        flex-direction: column;
                        align-items: center;
                    }
                    
                    .features-grid {
                        grid-template-columns: 1fr;
                        gap: 2rem;
                    }
                    
                    .code-tabs {
                        flex-direction: column;
                        align-items: center;
                    }
                }
                
                /* Animations */
                @keyframes fadeInUp {
                    from {
                        opacity: 0;
                        transform: translateY(30px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                .animate-fade-in {
                    animation: fadeInUp 0.8s ease-out;
                }
            </style>
        </head>
        <body>
            <!-- Navigation -->
            <nav>
                <div class="container">
                    <div class="nav-container">
                        <a href="#" class="logo">Redis Stream Queue</a>
                        <div class="nav-links">
                            <a href="#features">特性</a>
                            <a href="#install">安装</a>
                            <a href="#docs">文档</a>
                            <a href="https://github.com/Tinywan/redis-stream" class="github-btn">GitHub</a>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Hero Section -->
            <section class="hero">
                <div class="container">
                    <div class="hero-content animate-fade-in">
                        <h1>高性能轻量级消息队列</h1>
                        <p class="subtitle">基于 Redis Stream 的现代队列解决方案，为分布式系统提供可靠的消息传递</p>
                        <div class="hero-buttons">
                            <a href="#install" class="btn btn-primary">
                                <span>🚀</span> 快速开始
                            </a>
                            <a href="https://github.com/Tinywan/redis-stream" class="btn btn-secondary">
                                <span>📖</span> 查看文档
                            </a>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Stats Section -->
            <section class="stats">
                <div class="container">
                    <div class="stats-grid">
                        <div class="stat-item">
                            <h3>296+</h3>
                            <p>消息/秒吞吐量</p>
                        </div>
                        <div class="stat-item">
                            <h3>100%</h3>
                            <p>测试通过率</p>
                        </div>
                        <div class="stat-item">
                            <h3>6+</h3>
                            <p>核心特性</p>
                        </div>
                        <div class="stat-item">
                            <h3>7.4ms</h3>
                            <p>平均延迟</p>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Features Section -->
            <section class="features" id="features">
                <div class="container">
                    <div class="section-header">
                        <h2>核心特性</h2>
                        <p>专为现代应用设计的消息队列系统，提供高性能、可靠性和易用性</p>
                    </div>
                    <div class="features-grid">
                        <div class="feature-card">
                            <div class="feature-icon">⚡</div>
                            <h3>超高性能</h3>
                            <p>基于 Redis 5.0+ Stream 数据结构，每秒处理数百条消息，满足高并发场景需求</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🔄</div>
                            <h3>多消费者支持</h3>
                            <p>支持多个生产者和消费者同时工作，通过消费者组实现消息的负载均衡</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">💾</div>
                            <h3>消息持久化</h3>
                            <p>消息持久化存储在 Redis 中，确保系统重启后消息不会丢失</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">✅</div>
                            <h3>ACK 确认机制</h3>
                            <p>完善的消息确认机制，保证消息至少被成功处理一次，避免消息丢失</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">🔄</div>
                            <h3>智能重试</h3>
                            <p>内置消息重试机制，处理失败的消息会自动重试，支持自定义重试策略</p>
                        </div>
                        <div class="feature-card">
                            <div class="feature-icon">⏰</div>
                            <h3>延时消息</h3>
                            <p>支持延时消息和定时消息，满足定时任务和延迟处理需求</p>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Code Section -->
            <section class="code-section" id="install">
                <div class="container">
                    <div class="section-header">
                        <h2>快速开始</h2>
                        <p>只需几行代码即可开始使用 Redis Stream Queue</p>
                    </div>
                    
                    <div class="code-tabs">
                        <div class="code-tab active" onclick="showCode('install')">安装</div>
                        <div class="code-tab" onclick="showCode('producer')">生产者</div>
                        <div class="code-tab" onclick="showCode('consumer')">消费者</div>
                    </div>
                    
                    <div class="code-example">
                        <div class="code-header">
                            <span class="code-title" id="code-title">安装</span>
                            <button class="copy-btn" onclick="copyCode()">复制</button>
                        </div>
                        <div class="code-content" id="code-content">
# 使用 Composer 安装
composer require tinywan/redis-stream

# 或者添加到 composer.json
{
    "require": {
        "tinywan/redis-stream": "^1.0"
    }
}
                        </div>
                    </div>
                </div>
            </section>

            <!-- Footer -->
            <footer class="footer">
                <div class="container">
                    <div class="footer-links">
                        <a href="https://github.com/Tinywan/redis-stream">GitHub</a>
                        <a href="https://packagist.org/packages/tinywan/redis-stream">Packagist</a>
                        <a href="https://github.com/Tinywan/redis-stream/issues">Issues</a>
                        <a href="https://github.com/Tinywan/redis-stream/discussions">讨论</a>
                    </div>
                    <p>&copy; 2025 Redis Stream Queue. 基于 MIT 许可证开源</p>
                    <p>由 <a href="https://github.com/Tinywan" style="color: rgba(255,255,255,0.8);">Tinywan</a> 维护</p>
                </div>
            </footer>

            <script>
                // 代码示例切换
                const codeExamples = {
                    install: `# 使用 Composer 安装
composer require tinywan/redis-stream

# 或者添加到 composer.json
{
    "require": {
        "tinywan/redis-stream": "^1.0"
    }
}`,
                    producer: `<?php
require_once 'vendor/autoload.php';

use Tinywan\\RedisStream\\RedisStreamQueue;
use Tinywan\\RedisStream\\MonologFactory;

// 配置
$redisConfig = [
    'host' => '127.0.0.1',
    'port' => 6379,
];

$queueConfig = [
    'stream_name' => 'my_queue',
    'consumer_group' => 'my_group',
];

// 创建队列实例
$queue = RedisStreamQueue::getInstance(
    $redisConfig, 
    $queueConfig, 
    MonologFactory::createLogger('my-app')
);

// 发送消息
$messageId = $queue->send([
    'type' => 'user_registered',
    'user_id' => 123,
    'email' => 'user@example.com',
    'timestamp' => time()
]);

echo "消息已发送: " . $messageId;`,
                    consumer: `<?php
require_once 'vendor/autoload.php';

use Tinywan\\RedisStream\\RedisStreamQueue;
use Tinywan\\RedisStream\\MonologFactory;

// 创建队列实例
$queue = RedisStreamQueue::getInstance(
    $redisConfig, 
    $queueConfig, 
    MonologFactory::createLogger('consumer')
);

// 消费消息
$message = $queue->consume(function($message) {
    // 处理消息
    echo "处理消息类型: " . $message['type'] . "\\n";
    
    // 业务逻辑处理
    switch ($message['type']) {
        case 'user_registered':
            // 处理用户注册事件
            break;
        case 'order_created':
            // 处理订单创建事件
            break;
    }
    
    return true; // 确认消息
});

if ($message) {
    echo "消息处理完成\\n";
}`
                };

                function showCode(type) {
                    // 更新标签状态
                    document.querySelectorAll('.code-tab').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    event.target.classList.add('active');
                    
                    // 更新代码内容
                    document.getElementById('code-title').textContent = 
                        type === 'install' ? '安装' : 
                        type === 'producer' ? '生产者示例' : '消费者示例';
                    
                    document.getElementById('code-content').textContent = codeExamples[type];
                }

                function copyCode() {
                    const code = document.getElementById('code-content').textContent;
                    navigator.clipboard.writeText(code).then(() => {
                        const btn = event.target;
                        const originalText = btn.textContent;
                        btn.textContent = '已复制!';
                        setTimeout(() => {
                            btn.textContent = originalText;
                        }, 2000);
                    });
                }

                // 平滑滚动
                document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    anchor.addEventListener('click', function (e) {
                        e.preventDefault();
                        const target = document.querySelector(this.getAttribute('href'));
                        if (target) {
                            target.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            });
                        }
                    });
                });
            </script>
        </body>
        </html>
        EOF
        
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4